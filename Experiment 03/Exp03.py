# -*- coding: utf-8 -*-
"""Machinelearningb50exp03.ipynb

Automatically generated by Colab.
  
Original file is located at
    https://colab.research.google.com/drive/1UJMdo8EdCzIvkGFZBbO3knTIrkoSzDjs
"""

# Importing libraries
import numpy as np
import pandas as pd
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.metrics import silhouette_score, davies_bouldin_score
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the Dataset
# Generate a random dataset with 4 clusters for simulation
data, labels_true = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=42)
df = pd.DataFrame(data, columns=['Feature1', 'Feature2'])
print("First 5 rows of the dataset:")
print(df.head())

# Step 2: Data Preprocessing
# Normalize the data using StandardScaler
scaler = StandardScaler()
data_scaled = scaler.fit_transform(df)

# Step 3: Perform Clustering with K-Means
kmeans = KMeans(n_clusters=4, random_state=42)
kmeans_labels = kmeans.fit_predict(data_scaled)

# Visualizing the clusters for K-Means
plt.figure(figsize=(8, 6))
plt.scatter(data_scaled[:, 0], data_scaled[:, 1], c=kmeans_labels, cmap='viridis', s=50, alpha=0.7)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', label='Centroids')
plt.title("K-Means Clustering")
plt.xlabel("Feature1")
plt.ylabel("Feature2")
plt.legend()
plt.show()

# Step 4: Evaluate Performance for K-Means
silhouette_kmeans = silhouette_score(data_scaled, kmeans_labels)
dbi_kmeans = davies_bouldin_score(data_scaled, kmeans_labels)
print(f"K-Means Silhouette Score: {silhouette_kmeans:.3f}")
print(f"K-Means Davies-Bouldin Index: {dbi_kmeans:.3f}")

# Step 5: Perform Clustering with DBSCAN
dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan_labels = dbscan.fit_predict(data_scaled)

# Visualizing the clusters for DBSCAN
plt.figure(figsize=(8, 6))
plt.scatter(data_scaled[:, 0], data_scaled[:, 1], c=dbscan_labels, cmap='plasma', s=50, alpha=0.7)
plt.title("DBSCAN Clustering")
plt.xlabel("Feature1")
plt.ylabel("Feature2")
plt.show()

# Evaluate Performance for DBSCAN
silhouette_dbscan = silhouette_score(data_scaled, dbscan_labels) if len(set(dbscan_labels)) > 1 else -1
dbi_dbscan = davies_bouldin_score(data_scaled, dbscan_labels) if len(set(dbscan_labels)) > 1 else -1
print(f"DBSCAN Silhouette Score: {silhouette_dbscan:.3f}")
print(f"DBSCAN Davies-Bouldin Index: {dbi_dbscan:.3f}")

# Optional: Compare Results
print("\nComparison of Clustering Algorithms:")
print(f"K-Means Silhouette Score: {silhouette_kmeans:.3f}, Davies-Bouldin Index: {dbi_kmeans:.3f}")
print(f"DBSCAN Silhouette Score: {silhouette_dbscan:.3f}, Davies-Bouldin Index: {dbi_dbscan:.3f}")
