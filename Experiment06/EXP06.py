# -*- coding: utf-8 -*-
"""machinelearningb50exp06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hYavVZ2KRHCZw-Kl4Q5iwjKgGEHO0E0x
"""

import numpy as np

import pandas as pd

from google.colab import files

upload=files.upload()

# Replace 'your_file.csv' with the path to your CSV file
df = pd.read_csv('shootings.csv')

# Display the first few rows of the DataFrame
print(df.head())

df.head(6)
#

df.info()

df.isna().sum()

#listwise deletion
df_listwise = df.dropna()
print("\nDataFrame after listwise deletion:")
print(df_listwise)

# Perform mean imputation
df_mean_imputed = df.copy()
mean_age = df_mean_imputed['age'].mean()
df_mean_imputed['age'].fillna(mean_age, inplace=True)
# Display the imputed DataFrame
print("\nDataFrame after mean imputation:")
print(df_mean_imputed)

from scipy import stats


#calculate z-scores
z_scores = np.abs(stats.zscore(df['age']))
threshold = 80 #define a threshold for Z-score
outliers = np.where(z_scores > threshold)

print("\nOutliers based on Z-score:")
print(df.iloc[outliers])

outliers

df.iloc[outliers]

# Assuming 'outliers' is a tuple of indices and 'signs_of_mental_illness' is a column in your DataFrame
filtered_df = df.iloc[outliers[0]][df.iloc[outliers[0]]['signs_of_mental_illness'] == 1]
print(filtered_df)

# 1. Convert outliers to a boolean mask:
outlier_mask = np.zeros(df.shape[0], dtype=bool)
outlier_mask[outliers[0]] = True

# 2. Filter based on the mask and the 'signs_of_mental_illness' condition:
filtered_df = df[(outlier_mask) & (df['signs_of_mental_illness'] == 0)]

# 3. (Optional) Display the filtered DataFrame:
print(filtered_df)

from scipy import stats
import numpy as np  # Make sure NumPy is imported

# ... (your existing code) ...

#calculate z-scores
z_scores = np.abs(stats.zscore(df['age']))
threshold = 3 #define a threshold for Z-score
outliers = np.where(z_scores > threshold)

print("\nOutliers based on Z-score:")
print(df.iloc[outliers])

# Convert outliers to a NumPy array and then use any
outliers_array = np.array(outliers)  # Convert outliers to a NumPy array
outlier_mask = np.any(outliers_array, axis=0)  # Apply any along axis 0
# Create a boolean mask for filtering with the correct length
final_mask = np.zeros(df.shape[0], dtype=bool)
final_mask[outliers_array[0]] = outlier_mask  # Assign values from outlier_mask

# Filter DataFrame using the final boolean mask
filtered_df = df[final_mask]

# Print the filtered DataFrame
print("\nFiltered DataFrame:")
print(filtered_df)

outlier_mask

#IOR method
Q1 = df['age'].quantile(0.25)
Q3 = df['age'].quantile(0.75)
IQR = Q3 - Q1

# define bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# identify outliers
outliers = df[(df['age'] < lower_bound) | (df['age'] > upper_bound)]

# remove outliers
df_cleaned = df[(df['age'] >= lower_bound) & (df['age'] <= upper_bound)]

print("\nDataFrame after removing outliers (IQR method):")
print(df_cleaned)
